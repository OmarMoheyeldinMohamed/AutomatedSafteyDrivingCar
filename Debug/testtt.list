
testtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e58  08004e58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e60  08004e60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cd4  20000074  08004edc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003d48  08004edc  00023d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011af8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002349  00000000  00000000  00031b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00033ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ecf  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a2b  00000000  00000000  00056bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca19c  00000000  00000000  0006860a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001327a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c0  00000000  00000000  001327f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004df8 	.word	0x08004df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004df8 	.word	0x08004df8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	0000      	movs	r0, r0
	...

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	f5ad 5d6e 	sub.w	sp, sp, #15232	; 0x3b80
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f000 fda8 	bl	80019fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 fadb 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb2:	f000 fbef 	bl	8001694 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb6:	f000 fbbd 	bl	8001634 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000eba:	f000 fb8b 	bl	80015d4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ebe:	f000 fb35 	bl	800152c <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  char c='c';
 8000ec2:	2363      	movs	r3, #99	; 0x63
 8000ec4:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8000ec8:	f102 0231 	add.w	r2, r2, #49	; 0x31
 8000ecc:	7013      	strb	r3, [r2, #0]

	  	uint8_t image2[95][160];
	  	HAL_UART_Transmit(&huart1,(uint8_t*) &c, 1, HAL_MAX_DELAY);
 8000ece:	f507 516d 	add.w	r1, r7, #15168	; 0x3b40
 8000ed2:	f101 0131 	add.w	r1, r1, #49	; 0x31
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	2201      	movs	r2, #1
 8000edc:	48af      	ldr	r0, [pc, #700]	; (800119c <main+0x2fc>)
 8000ede:	f002 fd8b 	bl	80039f8 <HAL_UART_Transmit>
	  	for (int i  = 0; i < 95; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8000ee8:	f102 021c 	add.w	r2, r2, #28
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e01b      	b.n	8000f28 <main+0x88>
	  	{
	//  		if (i == 94)
	//  		{
	//  			HAL_UART_Receive(&huart1, data[i], 159, HAL_MAX_DELAY);
	//  		}
	  		HAL_UART_Receive(&huart1, data[i], 160, HAL_MAX_DELAY);
 8000ef0:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000ef4:	f103 031c 	add.w	r3, r3, #28
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	015b      	lsls	r3, r3, #5
 8000f02:	4aa7      	ldr	r2, [pc, #668]	; (80011a0 <main+0x300>)
 8000f04:	1899      	adds	r1, r3, r2
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	22a0      	movs	r2, #160	; 0xa0
 8000f0c:	48a3      	ldr	r0, [pc, #652]	; (800119c <main+0x2fc>)
 8000f0e:	f002 fe07 	bl	8003b20 <HAL_UART_Receive>
	  	for (int i  = 0; i < 95; i++)
 8000f12:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000f16:	f103 031c 	add.w	r3, r3, #28
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8000f22:	f102 021c 	add.w	r2, r2, #28
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000f2c:	f103 031c 	add.w	r3, r3, #28
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b5e      	cmp	r3, #94	; 0x5e
 8000f34:	dddc      	ble.n	8000ef0 <main+0x50>

	//  	HAL_UART_Receive(&huart1, *data, 100, HAL_MAX_DELAY);



	     for (int i = 0; i < 95; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8000f3c:	f102 0218 	add.w	r2, r2, #24
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e104      	b.n	800114e <main+0x2ae>
	     {
	       for (int j = 0; j < 160; j++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8000f4a:	f102 0214 	add.w	r2, r2, #20
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e0ea      	b.n	8001128 <main+0x288>
	       {
	         if (i == 0 || i == 94 || j == 0 || j == 159)
 8000f52:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000f56:	f103 0318 	add.w	r3, r3, #24
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d014      	beq.n	8000f8a <main+0xea>
 8000f60:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000f64:	f103 0318 	add.w	r3, r3, #24
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b5e      	cmp	r3, #94	; 0x5e
 8000f6c:	d00d      	beq.n	8000f8a <main+0xea>
 8000f6e:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000f72:	f103 0314 	add.w	r3, r3, #20
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <main+0xea>
 8000f7c:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000f80:	f103 0314 	add.w	r3, r3, #20
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b9f      	cmp	r3, #159	; 0x9f
 8000f88:	d116      	bne.n	8000fb8 <main+0x118>
	         {
	           image2[i][j] = (uint8_t) 0;
 8000f8a:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8000f8e:	f6a3 3194 	subw	r1, r3, #2964	; 0xb94
 8000f92:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000f96:	f103 0318 	add.w	r3, r3, #24
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	18ca      	adds	r2, r1, r3
 8000fa6:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000faa:	f103 0314 	add.w	r3, r3, #20
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e0ac      	b.n	8001112 <main+0x272>
	         }
	         else
	         {
	           int gradientX = data[i][j + 1] - data[i][j - 1];
 8000fb8:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000fbc:	f103 0314 	add.w	r3, r3, #20
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1c59      	adds	r1, r3, #1
 8000fc4:	4876      	ldr	r0, [pc, #472]	; (80011a0 <main+0x300>)
 8000fc6:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000fca:	f103 0318 	add.w	r3, r3, #24
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	4403      	add	r3, r0
 8000fda:	440b      	add	r3, r1
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461c      	mov	r4, r3
 8000fe0:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000fe4:	f103 0314 	add.w	r3, r3, #20
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1e59      	subs	r1, r3, #1
 8000fec:	486c      	ldr	r0, [pc, #432]	; (80011a0 <main+0x300>)
 8000fee:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8000ff2:	f103 0318 	add.w	r3, r3, #24
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	015b      	lsls	r3, r3, #5
 8001000:	4403      	add	r3, r0
 8001002:	440b      	add	r3, r1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	1ae3      	subs	r3, r4, r3
 8001008:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 800100c:	6013      	str	r3, [r2, #0]
	           int gradientY = data[i + 1][j] - data[i - 1][j];
 800100e:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001012:	f103 0318 	add.w	r3, r3, #24
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	4961      	ldr	r1, [pc, #388]	; (80011a0 <main+0x300>)
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	015b      	lsls	r3, r3, #5
 8001024:	18ca      	adds	r2, r1, r3
 8001026:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800102a:	f103 0314 	add.w	r3, r3, #20
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800103a:	f103 0318 	add.w	r3, r3, #24
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1e5a      	subs	r2, r3, #1
 8001042:	4957      	ldr	r1, [pc, #348]	; (80011a0 <main+0x300>)
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	015b      	lsls	r3, r3, #5
 800104c:	18ca      	adds	r2, r1, r3
 800104e:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001052:	f103 0314 	add.w	r3, r3, #20
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	1ac3      	subs	r3, r0, r3
 800105e:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001062:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001066:	6013      	str	r3, [r2, #0]

	           int cl= gradientX * gradientX + gradientY  * gradientY;
 8001068:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	fb03 f203 	mul.w	r2, r3, r3
 8001072:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001076:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	fb03 f303 	mul.w	r3, r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001086:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800108a:	6013      	str	r3, [r2, #0]
	           float gradient =  sqrt(cl);
 800108c:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001090:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f7ff f9ed 	bl	8000474 <__aeabi_i2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	ec43 2b10 	vmov	d0, r2, r3
 80010a2:	f003 fdcb 	bl	8004c3c <sqrt>
 80010a6:	ec53 2b10 	vmov	r2, r3, d0
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fd23 	bl	8000af8 <__aeabi_d2f>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80010b8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80010bc:	6013      	str	r3, [r2, #0]
	           // Serial.printf("%f\n", gradient);
	           uint8_t gr = (uint8_t) gradient;
 80010be:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 80010c2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80010d2:	793b      	ldrb	r3, [r7, #4]
 80010d4:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80010d8:	f102 0233 	add.w	r2, r2, #51	; 0x33
 80010dc:	7013      	strb	r3, [r2, #0]
	           image2[i][j] = gr;
 80010de:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80010e2:	f6a3 3194 	subw	r1, r3, #2964	; 0xb94
 80010e6:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80010ea:	f103 0318 	add.w	r3, r3, #24
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	18ca      	adds	r2, r1, r3
 80010fa:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80010fe:	f103 0314 	add.w	r3, r3, #20
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 800110a:	f102 0233 	add.w	r2, r2, #51	; 0x33
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	701a      	strb	r2, [r3, #0]
	       for (int j = 0; j < 160; j++)
 8001112:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001116:	f103 0314 	add.w	r3, r3, #20
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8001122:	f102 0214 	add.w	r2, r2, #20
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800112c:	f103 0314 	add.w	r3, r3, #20
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b9f      	cmp	r3, #159	; 0x9f
 8001134:	f77f af0d 	ble.w	8000f52 <main+0xb2>
	     for (int i = 0; i < 95; i++)
 8001138:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800113c:	f103 0318 	add.w	r3, r3, #24
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8001148:	f102 0218 	add.w	r2, r2, #24
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001152:	f103 0318 	add.w	r3, r3, #24
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b5e      	cmp	r3, #94	; 0x5e
 800115a:	f77f aef3 	ble.w	8000f44 <main+0xa4>
	         }
	       }
	     }


		 uint8_t leftFlag = 0, rightFlag = 0, leftNumber = 0, rightNumber= 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8001164:	f102 0213 	add.w	r2, r2, #19
 8001168:	7013      	strb	r3, [r2, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8001170:	f102 0212 	add.w	r2, r2, #18
 8001174:	7013      	strb	r3, [r2, #0]
 8001176:	2300      	movs	r3, #0
 8001178:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 800117c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001180:	7013      	strb	r3, [r2, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001188:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800118c:	7013      	strb	r3, [r2, #0]
		 for (int i = 94; i >=30; i--)
 800118e:	235e      	movs	r3, #94	; 0x5e
 8001190:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8001194:	f102 020c 	add.w	r2, r2, #12
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e0ae      	b.n	80012fa <main+0x45a>
 800119c:	200000dc 	.word	0x200000dc
 80011a0:	200001e4 	.word	0x200001e4
		 {
		   int yindexLeft = -0.4 * i + 90;
 80011a4:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80011a8:	f103 030c 	add.w	r3, r3, #12
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	f7ff f961 	bl	8000474 <__aeabi_i2d>
 80011b2:	a3ab      	add	r3, pc, #684	; (adr r3, 8001460 <main+0x5c0>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b9f      	ldr	r3, [pc, #636]	; (8001448 <main+0x5a8>)
 80011ca:	f7ff f807 	bl	80001dc <__adddf3>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc67 	bl	8000aa8 <__aeabi_d2iz>
 80011da:	4603      	mov	r3, r0
 80011dc:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 80011e0:	f102 0208 	add.w	r2, r2, #8
 80011e4:	6013      	str	r3, [r2, #0]
		   int yindexRight = 0.4 * i + 85;
 80011e6:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80011ea:	f103 030c 	add.w	r3, r3, #12
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f7ff f940 	bl	8000474 <__aeabi_i2d>
 80011f4:	a392      	add	r3, pc, #584	; (adr r3, 8001440 <main+0x5a0>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff f9a5 	bl	8000548 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4b90      	ldr	r3, [pc, #576]	; (800144c <main+0x5ac>)
 800120c:	f7fe ffe6 	bl	80001dc <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc46 	bl	8000aa8 <__aeabi_d2iz>
 800121c:	4603      	mov	r3, r0
 800121e:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 8001222:	f102 0204 	add.w	r2, r2, #4
 8001226:	6013      	str	r3, [r2, #0]

		   if (!leftFlag && image2[i][yindexLeft] >= 100)
 8001228:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800122c:	f103 0313 	add.w	r3, r3, #19
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d127      	bne.n	8001286 <main+0x3e6>
 8001236:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800123a:	f6a3 3194 	subw	r1, r3, #2964	; 0xb94
 800123e:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001242:	f103 030c 	add.w	r3, r3, #12
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	015b      	lsls	r3, r3, #5
 8001250:	18ca      	adds	r2, r1, r3
 8001252:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001256:	f103 0308 	add.w	r3, r3, #8
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b63      	cmp	r3, #99	; 0x63
 8001262:	d910      	bls.n	8001286 <main+0x3e6>
		   {
			 leftFlag = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 800126a:	f102 0213 	add.w	r2, r2, #19
 800126e:	7013      	strb	r3, [r2, #0]
			 leftNumber = i;
 8001270:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001274:	f103 030c 	add.w	r3, r3, #12
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001280:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001284:	7013      	strb	r3, [r2, #0]
		   }
		   if (!rightFlag && image2[i][yindexRight] >= 100)
 8001286:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800128a:	f103 0312 	add.w	r3, r3, #18
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d127      	bne.n	80012e4 <main+0x444>
 8001294:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8001298:	f6a3 3194 	subw	r1, r3, #2964	; 0xb94
 800129c:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80012a0:	f103 030c 	add.w	r3, r3, #12
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	18ca      	adds	r2, r1, r3
 80012b0:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80012b4:	f103 0304 	add.w	r3, r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b63      	cmp	r3, #99	; 0x63
 80012c0:	d910      	bls.n	80012e4 <main+0x444>
		   {
			 rightFlag = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 80012c8:	f102 0212 	add.w	r2, r2, #18
 80012cc:	7013      	strb	r3, [r2, #0]
			 rightNumber = i;
 80012ce:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80012d2:	f103 030c 	add.w	r3, r3, #12
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80012de:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80012e2:	7013      	strb	r3, [r2, #0]
		 for (int i = 94; i >=30; i--)
 80012e4:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80012e8:	f103 030c 	add.w	r3, r3, #12
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f507 526e 	add.w	r2, r7, #15232	; 0x3b80
 80012f4:	f102 020c 	add.w	r2, r2, #12
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 80012fe:	f103 030c 	add.w	r3, r3, #12
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b1d      	cmp	r3, #29
 8001306:	f73f af4d 	bgt.w	80011a4 <main+0x304>
//		 uint8_t left, right;
//		 if (leftFlag)
//		 {
//
//		 }
		 if (rightNumber == 0)
 800130a:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 800130e:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <main+0x486>
		 {
			 rightNumber = 20;
 8001318:	2314      	movs	r3, #20
 800131a:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 800131e:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8001322:	7013      	strb	r3, [r2, #0]
 8001324:	e02c      	b.n	8001380 <main+0x4e0>
		 } else if (rightNumber < 60)
 8001326:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 800132a:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b3b      	cmp	r3, #59	; 0x3b
 8001332:	d813      	bhi.n	800135c <main+0x4bc>
		 {
			 rightNumber = 20 + (rightNumber - 30) /3;
 8001334:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001338:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3b1e      	subs	r3, #30
 8001340:	4a43      	ldr	r2, [pc, #268]	; (8001450 <main+0x5b0>)
 8001342:	fb82 1203 	smull	r1, r2, r2, r3
 8001346:	17db      	asrs	r3, r3, #31
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3314      	adds	r3, #20
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001354:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8001358:	7013      	strb	r3, [r2, #0]
 800135a:	e011      	b.n	8001380 <main+0x4e0>
		 } else
		 {
			 rightNumber = 20 + (rightNumber - 30) /4;
 800135c:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001360:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	3b1e      	subs	r3, #30
 8001368:	2b00      	cmp	r3, #0
 800136a:	da00      	bge.n	800136e <main+0x4ce>
 800136c:	3303      	adds	r3, #3
 800136e:	109b      	asrs	r3, r3, #2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3314      	adds	r3, #20
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 800137a:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800137e:	7013      	strb	r3, [r2, #0]
		 }
		 if (leftNumber == 0)
 8001380:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001384:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <main+0x4fc>
		 {
			 leftNumber = 20;
 800138e:	2314      	movs	r3, #20
 8001390:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001394:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001398:	7013      	strb	r3, [r2, #0]
 800139a:	e02c      	b.n	80013f6 <main+0x556>
		 } else if (leftNumber < 60)
 800139c:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 80013a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b3b      	cmp	r3, #59	; 0x3b
 80013a8:	d813      	bhi.n	80013d2 <main+0x532>
		 {
			 leftNumber = 20 + (leftNumber - 30) /3;
 80013aa:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 80013ae:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3b1e      	subs	r3, #30
 80013b6:	4a26      	ldr	r2, [pc, #152]	; (8001450 <main+0x5b0>)
 80013b8:	fb82 1203 	smull	r1, r2, r2, r3
 80013bc:	17db      	asrs	r3, r3, #31
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3314      	adds	r3, #20
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80013ca:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80013ce:	7013      	strb	r3, [r2, #0]
 80013d0:	e011      	b.n	80013f6 <main+0x556>
		 } else
		 {
			 leftNumber = 20 + (leftNumber - 30) /4;
 80013d2:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 80013d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	3b1e      	subs	r3, #30
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da00      	bge.n	80013e4 <main+0x544>
 80013e2:	3303      	adds	r3, #3
 80013e4:	109b      	asrs	r3, r3, #2
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	3314      	adds	r3, #20
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80013f0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80013f4:	7013      	strb	r3, [r2, #0]
		 }

		HAL_UART_Transmit(&huart2, &right, sizeof(uint8_t), 3000);
 80013f6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013fa:	2201      	movs	r2, #1
 80013fc:	4915      	ldr	r1, [pc, #84]	; (8001454 <main+0x5b4>)
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <main+0x5b8>)
 8001400:	f002 fafa 	bl	80039f8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &rightNumber, sizeof(uint8_t), 3000);
 8001404:	f507 516d 	add.w	r1, r7, #15168	; 0x3b40
 8001408:	f101 012f 	add.w	r1, r1, #47	; 0x2f
 800140c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001410:	2201      	movs	r2, #1
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <main+0x5b8>)
 8001414:	f002 faf0 	bl	80039f8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &left, sizeof(uint8_t), 3000);
 8001418:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800141c:	2201      	movs	r2, #1
 800141e:	490f      	ldr	r1, [pc, #60]	; (800145c <main+0x5bc>)
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <main+0x5b8>)
 8001422:	f002 fae9 	bl	80039f8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &leftNumber, sizeof(uint8_t), 3000);
 8001426:	f507 516d 	add.w	r1, r7, #15168	; 0x3b40
 800142a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800142e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001432:	2201      	movs	r2, #1
 8001434:	4808      	ldr	r0, [pc, #32]	; (8001458 <main+0x5b8>)
 8001436:	f002 fadf 	bl	80039f8 <HAL_UART_Transmit>
  {
 800143a:	e542      	b.n	8000ec2 <main+0x22>
 800143c:	f3af 8000 	nop.w
 8001440:	9999999a 	.word	0x9999999a
 8001444:	3fd99999 	.word	0x3fd99999
 8001448:	40568000 	.word	0x40568000
 800144c:	40554000 	.word	0x40554000
 8001450:	55555556 	.word	0x55555556
 8001454:	20000000 	.word	0x20000000
 8001458:	20000160 	.word	0x20000160
 800145c:	20000001 	.word	0x20000001
 8001460:	9999999a 	.word	0x9999999a
 8001464:	bfd99999 	.word	0xbfd99999

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2244      	movs	r2, #68	; 0x44
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fbd8 	bl	8004c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800148a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800148e:	f000 fe5b 	bl	8002148 <HAL_PWREx_ControlVoltageScaling>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001498:	f000 f946 	bl	8001728 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800149c:	f000 fe36 	bl	800210c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <SystemClock_Config+0xc0>)
 80014a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <SystemClock_Config+0xc0>)
 80014a8:	f023 0318 	bic.w	r3, r3, #24
 80014ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014b0:	2314      	movs	r3, #20
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c0:	2360      	movs	r3, #96	; 0x60
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80014d0:	2310      	movs	r3, #16
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014d4:	2307      	movs	r3, #7
 80014d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d8:	2302      	movs	r3, #2
 80014da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fe85 	bl	80021f4 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014f0:	f000 f91a 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2303      	movs	r3, #3
 80014fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fa85 	bl	8002a1c <HAL_RCC_ClockConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001518:	f000 f906 	bl	8001728 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800151c:	f001 fe98 	bl	8003250 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001520:	bf00      	nop
 8001522:	3758      	adds	r7, #88	; 0x58
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000

0800152c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_TIM1_Init+0xa0>)
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <MX_TIM1_Init+0xa4>)
 800154e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001552:	221f      	movs	r2, #31
 8001554:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_TIM1_Init+0xa0>)
 800155e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_TIM1_Init+0xa0>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001576:	4815      	ldr	r0, [pc, #84]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001578:	f001 ff6c 	bl	8003454 <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001582:	f000 f8d1 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001594:	f001 ffb5 	bl	8003502 <HAL_TIM_ConfigClockSource>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800159e:	f000 f8c3 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM1_Init+0xa0>)
 80015b4:	f002 f96c 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015be:	f000 f8b3 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000090 	.word	0x20000090
 80015d0:	40012c00 	.word	0x40012c00

080015d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <MX_USART1_UART_Init+0x5c>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015e0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_USART1_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001618:	f002 f9a0 	bl	800395c <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 f881 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000dc 	.word	0x200000dc
 8001630:	40013800 	.word	0x40013800

08001634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_USART2_UART_Init+0x58>)
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <MX_USART2_UART_Init+0x5c>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001640:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_USART2_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_USART2_UART_Init+0x58>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001678:	f002 f970 	bl	800395c <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001682:	f000 f851 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000160 	.word	0x20000160
 8001690:	40004400 	.word	0x40004400

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_GPIO_Init+0x8c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2108      	movs	r1, #8
 80016f6:	480b      	ldr	r0, [pc, #44]	; (8001724 <MX_GPIO_Init+0x90>)
 80016f8:	f000 fcf0 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80016fc:	2308      	movs	r3, #8
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4619      	mov	r1, r3
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_GPIO_Init+0x90>)
 8001714:	f000 fb78 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	48000400 	.word	0x48000400

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	e7fe      	b.n	8001730 <Error_Handler+0x8>
	...

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_MspInit+0x44>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_MspInit+0x44>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6613      	str	r3, [r2, #96]	; 0x60
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_MspInit+0x44>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x44>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_MspInit+0x44>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6593      	str	r3, [r2, #88]	; 0x58
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_MspInit+0x44>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10b      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001798:	6613      	str	r3, [r2, #96]	; 0x60
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_TIM_Base_MspInit+0x3c>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0a0      	sub	sp, #128	; 0x80
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	2254      	movs	r2, #84	; 0x54
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 fa25 	bl	8004c2c <memset>
  if(huart->Instance==USART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a4b      	ldr	r2, [pc, #300]	; (8001914 <HAL_UART_MspInit+0x158>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d140      	bne.n	800186e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fb33 	bl	8002e64 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001804:	f7ff ff90 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <HAL_UART_MspInit+0x15c>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	4a42      	ldr	r2, [pc, #264]	; (8001918 <HAL_UART_MspInit+0x15c>)
 800180e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001812:	6613      	str	r3, [r2, #96]	; 0x60
 8001814:	4b40      	ldr	r3, [pc, #256]	; (8001918 <HAL_UART_MspInit+0x15c>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_UART_MspInit+0x15c>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a3c      	ldr	r2, [pc, #240]	; (8001918 <HAL_UART_MspInit+0x15c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <HAL_UART_MspInit+0x15c>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001838:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800183c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800184a:	2307      	movs	r3, #7
 800184c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f000 fad6 	bl	8001e08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2025      	movs	r0, #37	; 0x25
 8001862:	f000 fa1c 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001866:	2025      	movs	r0, #37	; 0x25
 8001868:	f000 fa35 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800186c:	e04d      	b.n	800190a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2a      	ldr	r2, [pc, #168]	; (800191c <HAL_UART_MspInit+0x160>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d148      	bne.n	800190a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001878:	2302      	movs	r3, #2
 800187a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800187c:	2300      	movs	r3, #0
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	4618      	mov	r0, r3
 8001886:	f001 faed 	bl	8002e64 <HAL_RCCEx_PeriphCLKConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001890:	f7ff ff4a 	bl	8001728 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_UART_MspInit+0x15c>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_UART_MspInit+0x15c>)
 800189a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189e:	6593      	str	r3, [r2, #88]	; 0x58
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_UART_MspInit+0x15c>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_UART_MspInit+0x15c>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <HAL_UART_MspInit+0x15c>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_UART_MspInit+0x15c>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018c4:	2304      	movs	r3, #4
 80018c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d4:	2307      	movs	r3, #7
 80018d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e2:	f000 fa91 	bl	8001e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018f8:	2303      	movs	r3, #3
 80018fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f000 fa7f 	bl	8001e08 <HAL_GPIO_Init>
}
 800190a:	bf00      	nop
 800190c:	3780      	adds	r7, #128	; 0x80
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40013800 	.word	0x40013800
 8001918:	40021000 	.word	0x40021000
 800191c:	40004400 	.word	0x40004400

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f89c 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
//      // ...
//    	uint8_t done = 'd';
//    	HAL_UART_Transmit(&huart2, &done, 1, HAL_MAX_DELAY );
//    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <USART1_IRQHandler+0x10>)
 800197a:	f002 f9a3 	bl	8003cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200000dc 	.word	0x200000dc

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	; (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f003 f903 	bl	8004be4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff fa5f 	bl	8000ea0 <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019f0:	08004e68 	.word	0x08004e68
  ldr r2, =_sbss
 80019f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019f8:	20003d48 	.word	0x20003d48

080019fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_IRQHandler>

080019fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f93d 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f80e 	bl	8001a30 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e001      	b.n	8001a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a20:	f7ff fe88 	bl	8001734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_InitTick+0x6c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_InitTick+0x70>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_InitTick+0x6c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f949 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d809      	bhi.n	8001a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f913 	bl	8001c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_InitTick+0x74>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e004      	b.n	8001a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e001      	b.n	8001a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	20003d44 	.word	0x20003d44

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20003d44 	.word	0x20003d44

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff3e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff31 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa2 	bl	8001c44 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d008      	beq.n	8001d34 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2204      	movs	r2, #4
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e022      	b.n	8001d7a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 020e 	bic.w	r2, r2, #14
 8001d42:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f003 021c 	and.w	r2, r3, #28
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d005      	beq.n	8001daa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e029      	b.n	8001dfe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 020e 	bic.w	r2, r2, #14
 8001db8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f003 021c 	and.w	r2, r3, #28
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
    }
  }
  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e148      	b.n	80020aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 813a 	beq.w	80020a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d005      	beq.n	8001e48 <HAL_GPIO_Init+0x40>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d130      	bne.n	8001eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 0201 	and.w	r2, r3, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d017      	beq.n	8001ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d123      	bne.n	8001f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	6939      	ldr	r1, [r7, #16]
 8001f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0203 	and.w	r2, r3, #3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8094 	beq.w	80020a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	4b52      	ldr	r3, [pc, #328]	; (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f80:	4a51      	ldr	r2, [pc, #324]	; (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6613      	str	r3, [r2, #96]	; 0x60
 8001f88:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f94:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <HAL_GPIO_Init+0x2c4>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fbe:	d00d      	beq.n	8001fdc <HAL_GPIO_Init+0x1d4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a43      	ldr	r2, [pc, #268]	; (80020d0 <HAL_GPIO_Init+0x2c8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0x1d0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_GPIO_Init+0x1cc>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1d6>
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1d6>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1d6>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fee:	4937      	ldr	r1, [pc, #220]	; (80020cc <HAL_GPIO_Init+0x2c4>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002020:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800204a:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002074:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f aeaf 	bne.w	8001e18 <HAL_GPIO_Init+0x10>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40007000 	.word	0x40007000

0800212c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <HAL_PWREx_GetVoltageRange+0x18>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40007000 	.word	0x40007000

08002148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002156:	d130      	bne.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002164:	d038      	beq.n	80021d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800216e:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002174:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2232      	movs	r2, #50	; 0x32
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	0c9b      	lsrs	r3, r3, #18
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218c:	e002      	b.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3b01      	subs	r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a0:	d102      	bne.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f2      	bne.n	800218e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d110      	bne.n	80021d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e00f      	b.n	80021da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c6:	d007      	beq.n	80021d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40007000 	.word	0x40007000
 80021ec:	20000004 	.word	0x20000004
 80021f0:	431bde83 	.word	0x431bde83

080021f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f000 bc02 	b.w	8002a0c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002208:	4b96      	ldr	r3, [pc, #600]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002212:	4b94      	ldr	r3, [pc, #592]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80e4 	beq.w	80023f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_RCC_OscConfig+0x4c>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	f040 808b 	bne.w	800234e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b01      	cmp	r3, #1
 800223c:	f040 8087 	bne.w	800234e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002240:	4b88      	ldr	r3, [pc, #544]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x64>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e3d9      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_RCC_OscConfig+0x7e>
 8002268:	4b7e      	ldr	r3, [pc, #504]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	e005      	b.n	800227e <HAL_RCC_OscConfig+0x8a>
 8002272:	4b7c      	ldr	r3, [pc, #496]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227e:	4293      	cmp	r3, r2
 8002280:	d223      	bcs.n	80022ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fd8c 	bl	8002da4 <RCC_SetFlashLatencyFromMSIRange>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e3ba      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002296:	4b73      	ldr	r3, [pc, #460]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a72      	ldr	r2, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b70      	ldr	r3, [pc, #448]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	496d      	ldr	r1, [pc, #436]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	4968      	ldr	r1, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	e025      	b.n	8002316 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ca:	4b66      	ldr	r3, [pc, #408]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4960      	ldr	r1, [pc, #384]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	495b      	ldr	r1, [pc, #364]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fd4c 	bl	8002da4 <RCC_SetFlashLatencyFromMSIRange>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e37a      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002316:	f000 fc81 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b51      	ldr	r3, [pc, #324]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4950      	ldr	r1, [pc, #320]	; (8002468 <HAL_RCC_OscConfig+0x274>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_RCC_OscConfig+0x278>)
 8002334:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002336:	4b4e      	ldr	r3, [pc, #312]	; (8002470 <HAL_RCC_OscConfig+0x27c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb78 	bl	8001a30 <HAL_InitTick>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d052      	beq.n	80023f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	e35e      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d032      	beq.n	80023bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a42      	ldr	r2, [pc, #264]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002362:	f7ff fbb5 	bl	8001ad0 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236a:	f7ff fbb1 	bl	8001ad0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e347      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002388:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a35      	ldr	r2, [pc, #212]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b33      	ldr	r3, [pc, #204]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4930      	ldr	r1, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	492b      	ldr	r1, [pc, #172]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 80023ba:	e01a      	b.n	80023f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023bc:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fb82 	bl	8001ad0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d0:	f7ff fb7e 	bl	8001ad0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e314      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1dc>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d073      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x21c>
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d10e      	bne.n	8002428 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d10b      	bne.n	8002428 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d063      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2f0>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d15f      	bne.n	80024e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e2f1      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x24c>
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e025      	b.n	800248c <HAL_RCC_OscConfig+0x298>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002448:	d114      	bne.n	8002474 <HAL_RCC_OscConfig+0x280>
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a02      	ldr	r2, [pc, #8]	; (8002464 <HAL_RCC_OscConfig+0x270>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e013      	b.n	800248c <HAL_RCC_OscConfig+0x298>
 8002464:	40021000 	.word	0x40021000
 8002468:	08004e10 	.word	0x08004e10
 800246c:	20000004 	.word	0x20000004
 8002470:	20000008 	.word	0x20000008
 8002474:	4ba0      	ldr	r3, [pc, #640]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a9f      	ldr	r2, [pc, #636]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b9d      	ldr	r3, [pc, #628]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a9c      	ldr	r2, [pc, #624]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7ff fb1c 	bl	8001ad0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fb18 	bl	8001ad0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e2ae      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ae:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x2a8>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff fb08 	bl	8001ad0 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff fb04 	bl	8001ad0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e29a      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2d0>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d060      	beq.n	80025b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_OscConfig+0x310>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d119      	bne.n	8002532 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d116      	bne.n	8002532 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002504:	4b7c      	ldr	r3, [pc, #496]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x328>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e277      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	4973      	ldr	r1, [pc, #460]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002530:	e040      	b.n	80025b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d023      	beq.n	8002582 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253a:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7ff fac3 	bl	8001ad0 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff fabf 	bl	8001ad0 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e255      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002560:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	495f      	ldr	r1, [pc, #380]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
 8002580:	e018      	b.n	80025b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7ff fa9f 	bl	8001ad0 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7ff fa9b 	bl	8001ad0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e231      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d03c      	beq.n	800263a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01c      	beq.n	8002602 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80025ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ce:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7ff fa7a 	bl	8001ad0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7ff fa76 	bl	8001ad0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e20c      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80025f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ef      	beq.n	80025e0 <HAL_RCC_OscConfig+0x3ec>
 8002600:	e01b      	b.n	800263a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002608:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7ff fa5d 	bl	8001ad0 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261a:	f7ff fa59 	bl	8001ad0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1ef      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1ef      	bne.n	800261a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80a6 	beq.w	8002794 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10d      	bne.n	8002674 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002670:	2301      	movs	r3, #1
 8002672:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_RCC_OscConfig+0x508>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d118      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_OscConfig+0x508>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x508>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268c:	f7ff fa20 	bl	8001ad0 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002694:	f7ff fa1c 	bl	8001ad0 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1b2      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x508>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d108      	bne.n	80026cc <HAL_RCC_OscConfig+0x4d8>
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ca:	e029      	b.n	8002720 <HAL_RCC_OscConfig+0x52c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d115      	bne.n	8002700 <HAL_RCC_OscConfig+0x50c>
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	4a03      	ldr	r2, [pc, #12]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f4:	e014      	b.n	8002720 <HAL_RCC_OscConfig+0x52c>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	4b9a      	ldr	r3, [pc, #616]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a99      	ldr	r2, [pc, #612]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002710:	4b96      	ldr	r3, [pc, #600]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a95      	ldr	r2, [pc, #596]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d016      	beq.n	8002756 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7ff f9d2 	bl	8001ad0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7ff f9ce 	bl	8001ad0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e162      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ed      	beq.n	8002730 <HAL_RCC_OscConfig+0x53c>
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7ff f9bb 	bl	8001ad0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7ff f9b7 	bl	8001ad0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e14b      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002774:	4b7d      	ldr	r3, [pc, #500]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ed      	bne.n	800275e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002782:	7ffb      	ldrb	r3, [r7, #31]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b78      	ldr	r3, [pc, #480]	; (800296c <HAL_RCC_OscConfig+0x778>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	4a77      	ldr	r2, [pc, #476]	; (800296c <HAL_RCC_OscConfig+0x778>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002792:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03c      	beq.n	800281a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a8:	4b70      	ldr	r3, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80027aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ae:	4a6f      	ldr	r2, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7ff f98a 	bl	8001ad0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c0:	f7ff f986 	bl	8001ad0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e11c      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d2:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80027d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ef      	beq.n	80027c0 <HAL_RCC_OscConfig+0x5cc>
 80027e0:	e01b      	b.n	800281a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e2:	4b62      	ldr	r3, [pc, #392]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80027e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027e8:	4a60      	ldr	r2, [pc, #384]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7ff f96d 	bl	8001ad0 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fa:	f7ff f969 	bl	8001ad0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0ff      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800280c:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x778>)
 800280e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ef      	bne.n	80027fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80f3 	beq.w	8002a0a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	2b02      	cmp	r3, #2
 800282a:	f040 80c9 	bne.w	80029c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800282e:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0203 	and.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	429a      	cmp	r2, r3
 8002840:	d12c      	bne.n	800289c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	3b01      	subs	r3, #1
 800284e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d123      	bne.n	800289c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d11b      	bne.n	800289c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d113      	bne.n	800289c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	3b01      	subs	r3, #1
 8002882:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d109      	bne.n	800289c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d06b      	beq.n	8002974 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d062      	beq.n	8002968 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a2:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0ac      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2d      	ldr	r2, [pc, #180]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80028b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028be:	f7ff f907 	bl	8001ad0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7ff f903 	bl	8001ad0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e099      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x778>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_OscConfig+0x77c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028fe:	0212      	lsls	r2, r2, #8
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002906:	0852      	lsrs	r2, r2, #1
 8002908:	3a01      	subs	r2, #1
 800290a:	0552      	lsls	r2, r2, #21
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0652      	lsls	r2, r2, #25
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800291e:	06d2      	lsls	r2, r2, #27
 8002920:	430a      	orrs	r2, r1
 8002922:	4912      	ldr	r1, [pc, #72]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_RCC_OscConfig+0x778>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0f      	ldr	r2, [pc, #60]	; (800296c <HAL_RCC_OscConfig+0x778>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_RCC_OscConfig+0x778>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_RCC_OscConfig+0x778>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002940:	f7ff f8c6 	bl	8001ad0 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff f8c2 	bl	8001ad0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e058      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <HAL_RCC_OscConfig+0x778>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002966:	e050      	b.n	8002a0a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04f      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
 800296c:	40021000 	.word	0x40021000
 8002970:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d144      	bne.n	8002a0a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 8002986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 8002992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002996:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002998:	f7ff f89a 	bl	8001ad0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7ff f896 	bl	8001ad0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e02c      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x7ac>
 80029be:	e024      	b.n	8002a0a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d01f      	beq.n	8002a06 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 80029cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7ff f87d 	bl	8001ad0 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029da:	f7ff f879 	bl	8001ad0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4905      	ldr	r1, [pc, #20]	; (8002a14 <HAL_RCC_OscConfig+0x820>)
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x824>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	60cb      	str	r3, [r1, #12]
 8002a04:	e001      	b.n	8002a0a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	feeefffc 	.word	0xfeeefffc

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0e7      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b75      	ldr	r3, [pc, #468]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b72      	ldr	r3, [pc, #456]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4970      	ldr	r1, [pc, #448]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b6e      	ldr	r3, [pc, #440]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cf      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d010      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d908      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4960      	ldr	r1, [pc, #384]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d04c      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d121      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0a6      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e09a      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e08e      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e086      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b46      	ldr	r3, [pc, #280]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4943      	ldr	r1, [pc, #268]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe ffe4 	bl	8001ad0 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe ffe0 	bl	8001ad0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e06e      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d010      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d208      	bcs.n	8002b62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	492b      	ldr	r1, [pc, #172]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d210      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	4923      	ldr	r1, [pc, #140]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e036      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4918      	ldr	r1, [pc, #96]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4910      	ldr	r1, [pc, #64]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd0:	f000 f824 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	490b      	ldr	r1, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1f4>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1f8>)
 8002bee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1fc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff1b 	bl	8001a30 <HAL_InitTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08004e10 	.word	0x08004e10
 8002c14:	20000004 	.word	0x20000004
 8002c18:	20000008 	.word	0x20000008

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d121      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d11e      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c5c:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e005      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c78:	4a2b      	ldr	r2, [pc, #172]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e004      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d134      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cc0:	e005      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc4:	617b      	str	r3, [r7, #20]
      break;
 8002cc6:	e005      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cca:	617b      	str	r3, [r7, #20]
      break;
 8002ccc:	e002      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	617b      	str	r3, [r7, #20]
      break;
 8002cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	3301      	adds	r3, #1
 8002ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0e5b      	lsrs	r3, r3, #25
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	3301      	adds	r3, #1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d14:	69bb      	ldr	r3, [r7, #24]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08004e28 	.word	0x08004e28
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	007a1200 	.word	0x007a1200

08002d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000004 	.word	0x20000004

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d50:	f7ff fff0 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08004e20 	.word	0x08004e20

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d7c:	f7ff ffda 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0adb      	lsrs	r3, r3, #11
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08004e20 	.word	0x08004e20

08002da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002db0:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dbc:	f7ff f9b6 	bl	800212c <HAL_PWREx_GetVoltageRange>
 8002dc0:	6178      	str	r0, [r7, #20]
 8002dc2:	e014      	b.n	8002dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dce:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ddc:	f7ff f9a6 	bl	800212c <HAL_PWREx_GetVoltageRange>
 8002de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df4:	d10b      	bne.n	8002e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d919      	bls.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8002e00:	d902      	bls.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e02:	2302      	movs	r3, #2
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	e013      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	e010      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d902      	bls.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e14:	2303      	movs	r3, #3
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e00a      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d102      	bne.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e20:	2302      	movs	r3, #2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e004      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b70      	cmp	r3, #112	; 0x70
 8002e2a:	d101      	bne.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 0207 	bic.w	r2, r3, #7
 8002e38:	4909      	ldr	r1, [pc, #36]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40022000 	.word	0x40022000

08002e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e70:	2300      	movs	r3, #0
 8002e72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d031      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e88:	d01a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e8e:	d814      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e98:	d10f      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e9a:	4b5d      	ldr	r3, [pc, #372]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ea6:	e00c      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f9de 	bl	8003270 <RCCEx_PLLSAI1_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb8:	e003      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec8:	4b51      	ldr	r3, [pc, #324]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	494e      	ldr	r1, [pc, #312]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ede:	e001      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 809e 	beq.w	800302e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ef6:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0c:	4b40      	ldr	r3, [pc, #256]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6593      	str	r3, [r2, #88]	; 0x58
 8002f18:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f24:	2301      	movs	r3, #1
 8002f26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f28:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a39      	ldr	r2, [pc, #228]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f34:	f7fe fdcc 	bl	8001ad0 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f3a:	e009      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7fe fdc8 	bl	8001ad0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f4e:	e005      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f50:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ef      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d15a      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01e      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d019      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d016      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fd88 	bl	8001ad0 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fd84 	bl	8001ad0 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d902      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	74fb      	strb	r3, [r7, #19]
            break;
 8002fda:	e006      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ec      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003006:	e009      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	74bb      	strb	r3, [r7, #18]
 800300c:	e006      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301c:	7c7b      	ldrb	r3, [r7, #17]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d105      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003022:	4b8a      	ldr	r3, [pc, #552]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	4a89      	ldr	r2, [pc, #548]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800303a:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f023 0203 	bic.w	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4980      	ldr	r1, [pc, #512]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800305c:	4b7b      	ldr	r3, [pc, #492]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f023 020c 	bic.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	4978      	ldr	r1, [pc, #480]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800307e:	4b73      	ldr	r3, [pc, #460]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	496f      	ldr	r1, [pc, #444]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	4967      	ldr	r1, [pc, #412]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030c2:	4b62      	ldr	r3, [pc, #392]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	495e      	ldr	r1, [pc, #376]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	4956      	ldr	r1, [pc, #344]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003106:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d028      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003128:	4b48      	ldr	r3, [pc, #288]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4945      	ldr	r1, [pc, #276]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003146:	d106      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a3f      	ldr	r2, [pc, #252]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003152:	60d3      	str	r3, [r2, #12]
 8003154:	e011      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800315e:	d10c      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f882 	bl	8003270 <RCCEx_PLLSAI1_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d028      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	492d      	ldr	r1, [pc, #180]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	4a28      	ldr	r2, [pc, #160]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b0:	60d3      	str	r3, [r2, #12]
 80031b2:	e011      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f853 	bl	8003270 <RCCEx_PLLSAI1_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01c      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003202:	d10c      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	2102      	movs	r1, #2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f830 	bl	8003270 <RCCEx_PLLSAI1_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	4904      	ldr	r1, [pc, #16]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003240:	7cbb      	ldrb	r3, [r7, #18]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000

08003270 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800327e:	4b74      	ldr	r3, [pc, #464]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d018      	beq.n	80032bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800328a:	4b71      	ldr	r3, [pc, #452]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0203 	and.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d10d      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
       ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032a2:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
       ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d047      	beq.n	8003346 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	e044      	b.n	8003346 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d018      	beq.n	80032f6 <RCCEx_PLLSAI1_Config+0x86>
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d825      	bhi.n	8003314 <RCCEx_PLLSAI1_Config+0xa4>
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d002      	beq.n	80032d2 <RCCEx_PLLSAI1_Config+0x62>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d009      	beq.n	80032e4 <RCCEx_PLLSAI1_Config+0x74>
 80032d0:	e020      	b.n	8003314 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032d2:	4b5f      	ldr	r3, [pc, #380]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d11d      	bne.n	800331a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e2:	e01a      	b.n	800331a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032e4:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e013      	b.n	800331e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032f6:	4b56      	ldr	r3, [pc, #344]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003302:	4b53      	ldr	r3, [pc, #332]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003312:	e006      	b.n	8003322 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e004      	b.n	8003324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003322:	bf00      	nop
    }

    if(status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800332a:	4b49      	ldr	r3, [pc, #292]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	430b      	orrs	r3, r1
 8003340:	4943      	ldr	r1, [pc, #268]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d17c      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800334c:	4b40      	ldr	r3, [pc, #256]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3f      	ldr	r2, [pc, #252]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003358:	f7fe fbba 	bl	8001ad0 <HAL_GetTick>
 800335c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800335e:	e009      	b.n	8003374 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003360:	f7fe fbb6 	bl	8001ad0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d902      	bls.n	8003374 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	73fb      	strb	r3, [r7, #15]
        break;
 8003372:	e005      	b.n	8003380 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ef      	bne.n	8003360 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d15f      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d110      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800338c:	4b30      	ldr	r3, [pc, #192]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003394:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6892      	ldr	r2, [r2, #8]
 800339c:	0211      	lsls	r1, r2, #8
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	06d2      	lsls	r2, r2, #27
 80033a4:	430a      	orrs	r2, r1
 80033a6:	492a      	ldr	r1, [pc, #168]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	610b      	str	r3, [r1, #16]
 80033ac:	e027      	b.n	80033fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d112      	bne.n	80033da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033b4:	4b26      	ldr	r3, [pc, #152]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6892      	ldr	r2, [r2, #8]
 80033c4:	0211      	lsls	r1, r2, #8
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6912      	ldr	r2, [r2, #16]
 80033ca:	0852      	lsrs	r2, r2, #1
 80033cc:	3a01      	subs	r2, #1
 80033ce:	0552      	lsls	r2, r2, #21
 80033d0:	430a      	orrs	r2, r1
 80033d2:	491f      	ldr	r1, [pc, #124]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	610b      	str	r3, [r1, #16]
 80033d8:	e011      	b.n	80033fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6892      	ldr	r2, [r2, #8]
 80033ea:	0211      	lsls	r1, r2, #8
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6952      	ldr	r2, [r2, #20]
 80033f0:	0852      	lsrs	r2, r2, #1
 80033f2:	3a01      	subs	r2, #1
 80033f4:	0652      	lsls	r2, r2, #25
 80033f6:	430a      	orrs	r2, r1
 80033f8:	4915      	ldr	r1, [pc, #84]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003408:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe fb61 	bl	8001ad0 <HAL_GetTick>
 800340e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003410:	e009      	b.n	8003426 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003412:	f7fe fb5d 	bl	8001ad0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d902      	bls.n	8003426 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	73fb      	strb	r3, [r7, #15]
          break;
 8003424:	e005      	b.n	8003432 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ef      	beq.n	8003412 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d106      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e049      	b.n	80034fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe f97e 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 f8fe 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_TIM_ConfigClockSource+0x1c>
 800351a:	2302      	movs	r3, #2
 800351c:	e0b6      	b.n	800368c <HAL_TIM_ConfigClockSource+0x18a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003540:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003548:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355a:	d03e      	beq.n	80035da <HAL_TIM_ConfigClockSource+0xd8>
 800355c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003560:	f200 8087 	bhi.w	8003672 <HAL_TIM_ConfigClockSource+0x170>
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	f000 8086 	beq.w	8003678 <HAL_TIM_ConfigClockSource+0x176>
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d87f      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
 8003572:	2b70      	cmp	r3, #112	; 0x70
 8003574:	d01a      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0xaa>
 8003576:	2b70      	cmp	r3, #112	; 0x70
 8003578:	d87b      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
 800357a:	2b60      	cmp	r3, #96	; 0x60
 800357c:	d050      	beq.n	8003620 <HAL_TIM_ConfigClockSource+0x11e>
 800357e:	2b60      	cmp	r3, #96	; 0x60
 8003580:	d877      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
 8003582:	2b50      	cmp	r3, #80	; 0x50
 8003584:	d03c      	beq.n	8003600 <HAL_TIM_ConfigClockSource+0xfe>
 8003586:	2b50      	cmp	r3, #80	; 0x50
 8003588:	d873      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d058      	beq.n	8003640 <HAL_TIM_ConfigClockSource+0x13e>
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d86f      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
 8003592:	2b30      	cmp	r3, #48	; 0x30
 8003594:	d064      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0x15e>
 8003596:	2b30      	cmp	r3, #48	; 0x30
 8003598:	d86b      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
 800359a:	2b20      	cmp	r3, #32
 800359c:	d060      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0x15e>
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d867      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d05c      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0x15e>
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d05a      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0x15e>
 80035aa:	e062      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6899      	ldr	r1, [r3, #8]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f000 f948 	bl	8003850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]
      break;
 80035d8:	e04f      	b.n	800367a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f000 f931 	bl	8003850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fc:	609a      	str	r2, [r3, #8]
      break;
 80035fe:	e03c      	b.n	800367a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	f000 f8a5 	bl	800375c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2150      	movs	r1, #80	; 0x50
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f8fe 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 800361e:	e02c      	b.n	800367a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	461a      	mov	r2, r3
 800362e:	f000 f8c4 	bl	80037ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2160      	movs	r1, #96	; 0x60
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f8ee 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 800363e:	e01c      	b.n	800367a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	461a      	mov	r2, r3
 800364e:	f000 f885 	bl	800375c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f8de 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 800365e:	e00c      	b.n	800367a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f000 f8d5 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 8003670:	e003      	b.n	800367a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      break;
 8003676:	e000      	b.n	800367a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003678:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <TIM_Base_SetConfig+0xbc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_Base_SetConfig+0x20>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b2:	d108      	bne.n	80036c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <TIM_Base_SetConfig+0xbc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0x52>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0x52>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <TIM_Base_SetConfig+0xc0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0x52>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <TIM_Base_SetConfig+0xc4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <TIM_Base_SetConfig+0xbc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0xa0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <TIM_Base_SetConfig+0xc0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0xa0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <TIM_Base_SetConfig+0xc4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d103      	bne.n	800373c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	615a      	str	r2, [r3, #20]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400

0800375c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f023 0201 	bic.w	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 030a 	bic.w	r3, r3, #10
 8003798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f023 0210 	bic.w	r2, r3, #16
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	031b      	lsls	r3, r3, #12
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	f043 0307 	orr.w	r3, r3, #7
 800383c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	431a      	orrs	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e04f      	b.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d108      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d004      	beq.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10c      	bne.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	4313      	orrs	r3, r2
 800392c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40014000 	.word	0x40014000

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e040      	b.n	80039f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd ff1c 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fc94 	bl	80042c8 <UART_SetConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 feb4 	bl	8004720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 ff3b 	bl	8004864 <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	f040 8082 	bne.w	8003b16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_Transmit+0x26>
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07a      	b.n	8003b18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Transmit+0x38>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e073      	b.n	8003b18 <HAL_UART_Transmit+0x120>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2221      	movs	r2, #33	; 0x21
 8003a44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a46:	f7fe f843 	bl	8001ad0 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x80>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a88:	e02d      	b.n	8003ae6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 ff2e 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e039      	b.n	8003b18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab6:	b292      	uxth	r2, r2
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3302      	adds	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e008      	b.n	8003ad4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b292      	uxth	r2, r2
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cb      	bne.n	8003a8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2140      	movs	r1, #64	; 0x40
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fefa 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e005      	b.n	8003b18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	f040 80bf 	bne.w	8003cb8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_Receive+0x26>
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0b7      	b.n	8003cba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Receive+0x38>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0b0      	b.n	8003cba <HAL_UART_Receive+0x19a>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2222      	movs	r2, #34	; 0x22
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b74:	f7fd ffac 	bl	8001ad0 <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d10e      	bne.n	8003bb2 <HAL_UART_Receive+0x92>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_UART_Receive+0x88>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba6:	e02d      	b.n	8003c04 <HAL_UART_Receive+0xe4>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	22ff      	movs	r2, #255	; 0xff
 8003bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bb0:	e028      	b.n	8003c04 <HAL_UART_Receive+0xe4>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <HAL_UART_Receive+0xb6>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <HAL_UART_Receive+0xac>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	22ff      	movs	r2, #255	; 0xff
 8003bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bca:	e01b      	b.n	8003c04 <HAL_UART_Receive+0xe4>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	227f      	movs	r2, #127	; 0x7f
 8003bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bd4:	e016      	b.n	8003c04 <HAL_UART_Receive+0xe4>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bde:	d10d      	bne.n	8003bfc <HAL_UART_Receive+0xdc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_UART_Receive+0xd2>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	227f      	movs	r2, #127	; 0x7f
 8003bec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bf0:	e008      	b.n	8003c04 <HAL_UART_Receive+0xe4>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	223f      	movs	r2, #63	; 0x3f
 8003bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bfa:	e003      	b.n	8003c04 <HAL_UART_Receive+0xe4>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d108      	bne.n	8003c28 <HAL_UART_Receive+0x108>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d104      	bne.n	8003c28 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	e003      	b.n	8003c30 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c38:	e033      	b.n	8003ca2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2120      	movs	r1, #32
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fe56 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e032      	b.n	8003cba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	8a7b      	ldrh	r3, [r7, #18]
 8003c64:	4013      	ands	r3, r2
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	3302      	adds	r3, #2
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e00d      	b.n	8003c90 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	8a7b      	ldrh	r3, [r7, #18]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4013      	ands	r3, r2
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1c5      	bne.n	8003c3a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b0ba      	sub	sp, #232	; 0xe8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003cee:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d115      	bne.n	8003d2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 82a6 	beq.w	800426e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
      }
      return;
 8003d2a:	e2a0      	b.n	800426e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8117 	beq.w	8003f64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d46:	4b85      	ldr	r3, [pc, #532]	; (8003f5c <HAL_UART_IRQHandler+0x298>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 810a 	beq.w	8003f64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d011      	beq.n	8003d80 <HAL_UART_IRQHandler+0xbc>
 8003d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d011      	beq.n	8003db0 <HAL_UART_IRQHandler+0xec>
 8003d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	f043 0204 	orr.w	r2, r3, #4
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_UART_IRQHandler+0x11c>
 8003dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd6:	f043 0202 	orr.w	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d017      	beq.n	8003e1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e12:	f043 0208 	orr.w	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d012      	beq.n	8003e4e <HAL_UART_IRQHandler+0x18a>
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00c      	beq.n	8003e4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 820c 	beq.w	8004272 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00d      	beq.n	8003e82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d04f      	beq.n	8003f46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fde9 	bl	8004a7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d141      	bne.n	8003f3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1d9      	bne.n	8003eba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d013      	beq.n	8003f36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <HAL_UART_IRQHandler+0x29c>)
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd ff33 	bl	8001d86 <HAL_DMA_Abort_IT>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d017      	beq.n	8003f56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f30:	4610      	mov	r0, r2
 8003f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e00f      	b.n	8003f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9b0 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	e00b      	b.n	8003f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9ac 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	e007      	b.n	8003f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f9a8 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f54:	e18d      	b.n	8004272 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f56:	bf00      	nop
    return;
 8003f58:	e18b      	b.n	8004272 <HAL_UART_IRQHandler+0x5ae>
 8003f5a:	bf00      	nop
 8003f5c:	04000120 	.word	0x04000120
 8003f60:	08004b45 	.word	0x08004b45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 8146 	bne.w	80041fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 813f 	beq.w	80041fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8138 	beq.w	80041fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	f040 80b4 	bne.w	800410a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 815f 	beq.w	8004276 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	f080 8157 	bcs.w	8004276 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 8085 	bne.w	80040ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800400e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004012:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800401a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1da      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800403e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3308      	adds	r3, #8
 800404e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004052:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004056:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800405a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e1      	bne.n	800402e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800407a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3308      	adds	r3, #8
 800408a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800408e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004090:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004094:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800409c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e3      	bne.n	800406a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040be:	f023 0310 	bic.w	r3, r3, #16
 80040c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e4      	bne.n	80040ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd fe0e 	bl	8001d0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	b29b      	uxth	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8d4 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004108:	e0b5      	b.n	8004276 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004116:	b29b      	uxth	r3, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a7 	beq.w	800427a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800412c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80a2 	beq.w	800427a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800414a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004158:	647b      	str	r3, [r7, #68]	; 0x44
 800415a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800415e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e4      	bne.n	8004136 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	623b      	str	r3, [r7, #32]
   return(result);
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004190:	633a      	str	r2, [r7, #48]	; 0x30
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e3      	bne.n	800416c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	69b9      	ldr	r1, [r7, #24]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	617b      	str	r3, [r7, #20]
   return(result);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e4      	bne.n	80041b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f85c 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f8:	e03f      	b.n	800427a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <HAL_UART_IRQHandler+0x560>
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800421a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fcd1 	bl	8004bc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004222:	e02d      	b.n	8004280 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01c      	beq.n	800427e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
    }
    return;
 800424c:	e017      	b.n	800427e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <HAL_UART_IRQHandler+0x5bc>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fc82 	bl	8004b70 <UART_EndTransmit_IT>
    return;
 800426c:	e008      	b.n	8004280 <HAL_UART_IRQHandler+0x5bc>
      return;
 800426e:	bf00      	nop
 8004270:	e006      	b.n	8004280 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_UART_IRQHandler+0x5bc>
      return;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_UART_IRQHandler+0x5bc>
    return;
 800427e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004280:	37e8      	adds	r7, #232	; 0xe8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop

08004288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4bb4      	ldr	r3, [pc, #720]	; (80045c8 <UART_SetConfig+0x300>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4aa9      	ldr	r2, [pc, #676]	; (80045cc <UART_SetConfig+0x304>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	4313      	orrs	r3, r2
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4aa0      	ldr	r2, [pc, #640]	; (80045d0 <UART_SetConfig+0x308>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d126      	bne.n	80043a0 <UART_SetConfig+0xd8>
 8004352:	4ba0      	ldr	r3, [pc, #640]	; (80045d4 <UART_SetConfig+0x30c>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b03      	cmp	r3, #3
 800435e:	d81b      	bhi.n	8004398 <UART_SetConfig+0xd0>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0xa0>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	08004379 	.word	0x08004379
 800436c:	08004389 	.word	0x08004389
 8004370:	08004381 	.word	0x08004381
 8004374:	08004391 	.word	0x08004391
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e080      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004380:	2302      	movs	r3, #2
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e07c      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e078      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e074      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e070      	b.n	8004482 <UART_SetConfig+0x1ba>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a8c      	ldr	r2, [pc, #560]	; (80045d8 <UART_SetConfig+0x310>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d138      	bne.n	800441c <UART_SetConfig+0x154>
 80043aa:	4b8a      	ldr	r3, [pc, #552]	; (80045d4 <UART_SetConfig+0x30c>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d82d      	bhi.n	8004414 <UART_SetConfig+0x14c>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0xf8>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	08004415 	.word	0x08004415
 80043c8:	08004415 	.word	0x08004415
 80043cc:	08004415 	.word	0x08004415
 80043d0:	08004405 	.word	0x08004405
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004415 	.word	0x08004415
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004415 	.word	0x08004415
 80043e8:	08004415 	.word	0x08004415
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e042      	b.n	8004482 <UART_SetConfig+0x1ba>
 80043fc:	2302      	movs	r3, #2
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e03e      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004404:	2304      	movs	r3, #4
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e03a      	b.n	8004482 <UART_SetConfig+0x1ba>
 800440c:	2308      	movs	r3, #8
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e036      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004414:	2310      	movs	r3, #16
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e032      	b.n	8004482 <UART_SetConfig+0x1ba>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6a      	ldr	r2, [pc, #424]	; (80045cc <UART_SetConfig+0x304>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d12a      	bne.n	800447c <UART_SetConfig+0x1b4>
 8004426:	4b6b      	ldr	r3, [pc, #428]	; (80045d4 <UART_SetConfig+0x30c>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004434:	d01a      	beq.n	800446c <UART_SetConfig+0x1a4>
 8004436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443a:	d81b      	bhi.n	8004474 <UART_SetConfig+0x1ac>
 800443c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004440:	d00c      	beq.n	800445c <UART_SetConfig+0x194>
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004446:	d815      	bhi.n	8004474 <UART_SetConfig+0x1ac>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <UART_SetConfig+0x18c>
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d008      	beq.n	8004464 <UART_SetConfig+0x19c>
 8004452:	e00f      	b.n	8004474 <UART_SetConfig+0x1ac>
 8004454:	2300      	movs	r3, #0
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445a:	e012      	b.n	8004482 <UART_SetConfig+0x1ba>
 800445c:	2302      	movs	r3, #2
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004462:	e00e      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004464:	2304      	movs	r3, #4
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e00a      	b.n	8004482 <UART_SetConfig+0x1ba>
 800446c:	2308      	movs	r3, #8
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e006      	b.n	8004482 <UART_SetConfig+0x1ba>
 8004474:	2310      	movs	r3, #16
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e002      	b.n	8004482 <UART_SetConfig+0x1ba>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a51      	ldr	r2, [pc, #324]	; (80045cc <UART_SetConfig+0x304>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d17a      	bne.n	8004582 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800448c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004490:	2b08      	cmp	r3, #8
 8004492:	d824      	bhi.n	80044de <UART_SetConfig+0x216>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0x1d4>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044cf 	.word	0x080044cf
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044df 	.word	0x080044df
 80044b8:	080044df 	.word	0x080044df
 80044bc:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7fe fc44 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80044c4:	61f8      	str	r0, [r7, #28]
        break;
 80044c6:	e010      	b.n	80044ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b44      	ldr	r3, [pc, #272]	; (80045dc <UART_SetConfig+0x314>)
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e00d      	b.n	80044ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fe fba5 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 80044d2:	61f8      	str	r0, [r7, #28]
        break;
 80044d4:	e009      	b.n	80044ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e005      	b.n	80044ea <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8107 	beq.w	8004700 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d305      	bcc.n	800450e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004514:	e0f4      	b.n	8004700 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2200      	movs	r2, #0
 800451a:	461c      	mov	r4, r3
 800451c:	4615      	mov	r5, r2
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	022b      	lsls	r3, r5, #8
 8004528:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800452c:	0222      	lsls	r2, r4, #8
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	6849      	ldr	r1, [r1, #4]
 8004532:	0849      	lsrs	r1, r1, #1
 8004534:	2000      	movs	r0, #0
 8004536:	4688      	mov	r8, r1
 8004538:	4681      	mov	r9, r0
 800453a:	eb12 0a08 	adds.w	sl, r2, r8
 800453e:	eb43 0b09 	adc.w	fp, r3, r9
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004550:	4650      	mov	r0, sl
 8004552:	4659      	mov	r1, fp
 8004554:	f7fc fb20 	bl	8000b98 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004566:	d308      	bcc.n	800457a <UART_SetConfig+0x2b2>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456e:	d204      	bcs.n	800457a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e0c2      	b.n	8004700 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004580:	e0be      	b.n	8004700 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458a:	d16a      	bne.n	8004662 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800458c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004590:	2b08      	cmp	r3, #8
 8004592:	d834      	bhi.n	80045fe <UART_SetConfig+0x336>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x2d4>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045e9 	.word	0x080045e9
 80045a8:	080045ff 	.word	0x080045ff
 80045ac:	080045ef 	.word	0x080045ef
 80045b0:	080045ff 	.word	0x080045ff
 80045b4:	080045ff 	.word	0x080045ff
 80045b8:	080045ff 	.word	0x080045ff
 80045bc:	080045f7 	.word	0x080045f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe fbc4 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80045c4:	61f8      	str	r0, [r7, #28]
        break;
 80045c6:	e020      	b.n	800460a <UART_SetConfig+0x342>
 80045c8:	efff69f3 	.word	0xefff69f3
 80045cc:	40008000 	.word	0x40008000
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40004400 	.word	0x40004400
 80045dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7fe fbca 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80045e4:	61f8      	str	r0, [r7, #28]
        break;
 80045e6:	e010      	b.n	800460a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <UART_SetConfig+0x454>)
 80045ea:	61fb      	str	r3, [r7, #28]
        break;
 80045ec:	e00d      	b.n	800460a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ee:	f7fe fb15 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 80045f2:	61f8      	str	r0, [r7, #28]
        break;
 80045f4:	e009      	b.n	800460a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fa:	61fb      	str	r3, [r7, #28]
        break;
 80045fc:	e005      	b.n	800460a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d077      	beq.n	8004700 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	005a      	lsls	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b0f      	cmp	r3, #15
 800462a:	d916      	bls.n	800465a <UART_SetConfig+0x392>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d212      	bcs.n	800465a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f023 030f 	bic.w	r3, r3, #15
 800463c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	b29b      	uxth	r3, r3
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	b29a      	uxth	r2, r3
 800464a:	8afb      	ldrh	r3, [r7, #22]
 800464c:	4313      	orrs	r3, r2
 800464e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	8afa      	ldrh	r2, [r7, #22]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	e052      	b.n	8004700 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004660:	e04e      	b.n	8004700 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004662:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004666:	2b08      	cmp	r3, #8
 8004668:	d827      	bhi.n	80046ba <UART_SetConfig+0x3f2>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x3a8>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004695 	.word	0x08004695
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046a5 	.word	0x080046a5
 800467c:	080046bb 	.word	0x080046bb
 8004680:	080046ab 	.word	0x080046ab
 8004684:	080046bb 	.word	0x080046bb
 8004688:	080046bb 	.word	0x080046bb
 800468c:	080046bb 	.word	0x080046bb
 8004690:	080046b3 	.word	0x080046b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7fe fb5a 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 8004698:	61f8      	str	r0, [r7, #28]
        break;
 800469a:	e014      	b.n	80046c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800469c:	f7fe fb6c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80046a0:	61f8      	str	r0, [r7, #28]
        break;
 80046a2:	e010      	b.n	80046c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <UART_SetConfig+0x454>)
 80046a6:	61fb      	str	r3, [r7, #28]
        break;
 80046a8:	e00d      	b.n	80046c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046aa:	f7fe fab7 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 80046ae:	61f8      	str	r0, [r7, #28]
        break;
 80046b0:	e009      	b.n	80046c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b6:	61fb      	str	r3, [r7, #28]
        break;
 80046b8:	e005      	b.n	80046c6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046c4:	bf00      	nop
    }

    if (pclk != 0U)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d019      	beq.n	8004700 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	085a      	lsrs	r2, r3, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b0f      	cmp	r3, #15
 80046e4:	d909      	bls.n	80046fa <UART_SetConfig+0x432>
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d205      	bcs.n	80046fa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60da      	str	r2, [r3, #12]
 80046f8:	e002      	b.n	8004700 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800470c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004710:	4618      	mov	r0, r3
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471a:	bf00      	nop
 800471c:	00f42400 	.word	0x00f42400

08004720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01a      	beq.n	8004836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481e:	d10a      	bne.n	8004836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af02      	add	r7, sp, #8
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004874:	f7fd f92c 	bl	8001ad0 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b08      	cmp	r3, #8
 8004886:	d10e      	bne.n	80048a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f82d 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e023      	b.n	80048ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d10e      	bne.n	80048d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f817 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e00d      	b.n	80048ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b09c      	sub	sp, #112	; 0x70
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004906:	e0a5      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	f000 80a1 	beq.w	8004a54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fd f8dd 	bl	8001ad0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <UART_WaitOnFlagUntilTimeout+0x32>
 8004922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004924:	2b00      	cmp	r3, #0
 8004926:	d13e      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004938:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800493c:	667b      	str	r3, [r7, #100]	; 0x64
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004948:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800494c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e6      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3308      	adds	r3, #8
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	663b      	str	r3, [r7, #96]	; 0x60
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3308      	adds	r3, #8
 8004978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800497a:	64ba      	str	r2, [r7, #72]	; 0x48
 800497c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e067      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d04f      	beq.n	8004a54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c2:	d147      	bne.n	8004a54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049cc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e6      	bne.n	80049ce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a20:	623a      	str	r2, [r7, #32]
 8004a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	6a3a      	ldr	r2, [r7, #32]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e010      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	f43f af4a 	beq.w	8004908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3770      	adds	r7, #112	; 0x70
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b095      	sub	sp, #84	; 0x54
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e6      	bne.n	8004a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d118      	bne.n	8004b26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6979      	ldr	r1, [r7, #20]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e6      	bne.n	8004af4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b38:	bf00      	nop
 8004b3a:	3754      	adds	r7, #84	; 0x54
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff fb9a 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6979      	ldr	r1, [r7, #20]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e6      	bne.n	8004b78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fb66 	bl	8004288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bbc:	bf00      	nop
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <__errno>:
 8004bd8:	4b01      	ldr	r3, [pc, #4]	; (8004be0 <__errno+0x8>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000010 	.word	0x20000010

08004be4 <__libc_init_array>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4d0d      	ldr	r5, [pc, #52]	; (8004c1c <__libc_init_array+0x38>)
 8004be8:	4c0d      	ldr	r4, [pc, #52]	; (8004c20 <__libc_init_array+0x3c>)
 8004bea:	1b64      	subs	r4, r4, r5
 8004bec:	10a4      	asrs	r4, r4, #2
 8004bee:	2600      	movs	r6, #0
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d109      	bne.n	8004c08 <__libc_init_array+0x24>
 8004bf4:	4d0b      	ldr	r5, [pc, #44]	; (8004c24 <__libc_init_array+0x40>)
 8004bf6:	4c0c      	ldr	r4, [pc, #48]	; (8004c28 <__libc_init_array+0x44>)
 8004bf8:	f000 f8fe 	bl	8004df8 <_init>
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	2600      	movs	r6, #0
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	d105      	bne.n	8004c12 <__libc_init_array+0x2e>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0c:	4798      	blx	r3
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7ee      	b.n	8004bf0 <__libc_init_array+0xc>
 8004c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c16:	4798      	blx	r3
 8004c18:	3601      	adds	r6, #1
 8004c1a:	e7f2      	b.n	8004c02 <__libc_init_array+0x1e>
 8004c1c:	08004e60 	.word	0x08004e60
 8004c20:	08004e60 	.word	0x08004e60
 8004c24:	08004e60 	.word	0x08004e60
 8004c28:	08004e64 	.word	0x08004e64

08004c2c <memset>:
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d100      	bne.n	8004c36 <memset+0xa>
 8004c34:	4770      	bx	lr
 8004c36:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3a:	e7f9      	b.n	8004c30 <memset+0x4>

08004c3c <sqrt>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	ed2d 8b02 	vpush	{d8}
 8004c42:	ec55 4b10 	vmov	r4, r5, d0
 8004c46:	f000 f825 	bl	8004c94 <__ieee754_sqrt>
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	4620      	mov	r0, r4
 8004c50:	4629      	mov	r1, r5
 8004c52:	eeb0 8a40 	vmov.f32	s16, s0
 8004c56:	eef0 8a60 	vmov.f32	s17, s1
 8004c5a:	f7fb ff0f 	bl	8000a7c <__aeabi_dcmpun>
 8004c5e:	b990      	cbnz	r0, 8004c86 <sqrt+0x4a>
 8004c60:	2200      	movs	r2, #0
 8004c62:	2300      	movs	r3, #0
 8004c64:	4620      	mov	r0, r4
 8004c66:	4629      	mov	r1, r5
 8004c68:	f7fb fee0 	bl	8000a2c <__aeabi_dcmplt>
 8004c6c:	b158      	cbz	r0, 8004c86 <sqrt+0x4a>
 8004c6e:	f7ff ffb3 	bl	8004bd8 <__errno>
 8004c72:	2321      	movs	r3, #33	; 0x21
 8004c74:	6003      	str	r3, [r0, #0]
 8004c76:	2200      	movs	r2, #0
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f7fb fd8d 	bl	800079c <__aeabi_ddiv>
 8004c82:	ec41 0b18 	vmov	d8, r0, r1
 8004c86:	eeb0 0a48 	vmov.f32	s0, s16
 8004c8a:	eef0 0a68 	vmov.f32	s1, s17
 8004c8e:	ecbd 8b02 	vpop	{d8}
 8004c92:	bd38      	pop	{r3, r4, r5, pc}

08004c94 <__ieee754_sqrt>:
 8004c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c98:	ec55 4b10 	vmov	r4, r5, d0
 8004c9c:	4e55      	ldr	r6, [pc, #340]	; (8004df4 <__ieee754_sqrt+0x160>)
 8004c9e:	43ae      	bics	r6, r5
 8004ca0:	ee10 0a10 	vmov	r0, s0
 8004ca4:	ee10 3a10 	vmov	r3, s0
 8004ca8:	462a      	mov	r2, r5
 8004caa:	4629      	mov	r1, r5
 8004cac:	d110      	bne.n	8004cd0 <__ieee754_sqrt+0x3c>
 8004cae:	ee10 2a10 	vmov	r2, s0
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	f7fb fc48 	bl	8000548 <__aeabi_dmul>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7fb fa8c 	bl	80001dc <__adddf3>
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	ec45 4b10 	vmov	d0, r4, r5
 8004ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	dc10      	bgt.n	8004cf6 <__ieee754_sqrt+0x62>
 8004cd4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004cd8:	4330      	orrs	r0, r6
 8004cda:	d0f5      	beq.n	8004cc8 <__ieee754_sqrt+0x34>
 8004cdc:	b15d      	cbz	r5, 8004cf6 <__ieee754_sqrt+0x62>
 8004cde:	ee10 2a10 	vmov	r2, s0
 8004ce2:	462b      	mov	r3, r5
 8004ce4:	ee10 0a10 	vmov	r0, s0
 8004ce8:	f7fb fa76 	bl	80001d8 <__aeabi_dsub>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	f7fb fd54 	bl	800079c <__aeabi_ddiv>
 8004cf4:	e7e6      	b.n	8004cc4 <__ieee754_sqrt+0x30>
 8004cf6:	1512      	asrs	r2, r2, #20
 8004cf8:	d074      	beq.n	8004de4 <__ieee754_sqrt+0x150>
 8004cfa:	07d4      	lsls	r4, r2, #31
 8004cfc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004d00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004d08:	bf5e      	ittt	pl
 8004d0a:	0fda      	lsrpl	r2, r3, #31
 8004d0c:	005b      	lslpl	r3, r3, #1
 8004d0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004d12:	2400      	movs	r4, #0
 8004d14:	0fda      	lsrs	r2, r3, #31
 8004d16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004d1a:	107f      	asrs	r7, r7, #1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	2516      	movs	r5, #22
 8004d20:	4620      	mov	r0, r4
 8004d22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d26:	1886      	adds	r6, r0, r2
 8004d28:	428e      	cmp	r6, r1
 8004d2a:	bfde      	ittt	le
 8004d2c:	1b89      	suble	r1, r1, r6
 8004d2e:	18b0      	addle	r0, r6, r2
 8004d30:	18a4      	addle	r4, r4, r2
 8004d32:	0049      	lsls	r1, r1, #1
 8004d34:	3d01      	subs	r5, #1
 8004d36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004d3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004d3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d42:	d1f0      	bne.n	8004d26 <__ieee754_sqrt+0x92>
 8004d44:	462a      	mov	r2, r5
 8004d46:	f04f 0e20 	mov.w	lr, #32
 8004d4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004d4e:	4281      	cmp	r1, r0
 8004d50:	eb06 0c05 	add.w	ip, r6, r5
 8004d54:	dc02      	bgt.n	8004d5c <__ieee754_sqrt+0xc8>
 8004d56:	d113      	bne.n	8004d80 <__ieee754_sqrt+0xec>
 8004d58:	459c      	cmp	ip, r3
 8004d5a:	d811      	bhi.n	8004d80 <__ieee754_sqrt+0xec>
 8004d5c:	f1bc 0f00 	cmp.w	ip, #0
 8004d60:	eb0c 0506 	add.w	r5, ip, r6
 8004d64:	da43      	bge.n	8004dee <__ieee754_sqrt+0x15a>
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	db41      	blt.n	8004dee <__ieee754_sqrt+0x15a>
 8004d6a:	f100 0801 	add.w	r8, r0, #1
 8004d6e:	1a09      	subs	r1, r1, r0
 8004d70:	459c      	cmp	ip, r3
 8004d72:	bf88      	it	hi
 8004d74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004d78:	eba3 030c 	sub.w	r3, r3, ip
 8004d7c:	4432      	add	r2, r6
 8004d7e:	4640      	mov	r0, r8
 8004d80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004d84:	f1be 0e01 	subs.w	lr, lr, #1
 8004d88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d94:	d1db      	bne.n	8004d4e <__ieee754_sqrt+0xba>
 8004d96:	430b      	orrs	r3, r1
 8004d98:	d006      	beq.n	8004da8 <__ieee754_sqrt+0x114>
 8004d9a:	1c50      	adds	r0, r2, #1
 8004d9c:	bf13      	iteet	ne
 8004d9e:	3201      	addne	r2, #1
 8004da0:	3401      	addeq	r4, #1
 8004da2:	4672      	moveq	r2, lr
 8004da4:	f022 0201 	bicne.w	r2, r2, #1
 8004da8:	1063      	asrs	r3, r4, #1
 8004daa:	0852      	lsrs	r2, r2, #1
 8004dac:	07e1      	lsls	r1, r4, #31
 8004dae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004db2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004db6:	bf48      	it	mi
 8004db8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004dbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	e781      	b.n	8004cc8 <__ieee754_sqrt+0x34>
 8004dc4:	0ad9      	lsrs	r1, r3, #11
 8004dc6:	3815      	subs	r0, #21
 8004dc8:	055b      	lsls	r3, r3, #21
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	d0fa      	beq.n	8004dc4 <__ieee754_sqrt+0x130>
 8004dce:	02cd      	lsls	r5, r1, #11
 8004dd0:	d50a      	bpl.n	8004de8 <__ieee754_sqrt+0x154>
 8004dd2:	f1c2 0420 	rsb	r4, r2, #32
 8004dd6:	fa23 f404 	lsr.w	r4, r3, r4
 8004dda:	1e55      	subs	r5, r2, #1
 8004ddc:	4093      	lsls	r3, r2
 8004dde:	4321      	orrs	r1, r4
 8004de0:	1b42      	subs	r2, r0, r5
 8004de2:	e78a      	b.n	8004cfa <__ieee754_sqrt+0x66>
 8004de4:	4610      	mov	r0, r2
 8004de6:	e7f0      	b.n	8004dca <__ieee754_sqrt+0x136>
 8004de8:	0049      	lsls	r1, r1, #1
 8004dea:	3201      	adds	r2, #1
 8004dec:	e7ef      	b.n	8004dce <__ieee754_sqrt+0x13a>
 8004dee:	4680      	mov	r8, r0
 8004df0:	e7bd      	b.n	8004d6e <__ieee754_sqrt+0xda>
 8004df2:	bf00      	nop
 8004df4:	7ff00000 	.word	0x7ff00000

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
